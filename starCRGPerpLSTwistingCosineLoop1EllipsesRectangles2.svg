<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
    var basePointX    = 50.;
    var basePointY    = 200.;
    var currentX      = 0.;
    var currentY      = 0.;
    var offsetX       = 0.;
    var offsetY       = 0.;
    var radius        = 0.;
    var minorAxis     = 20;
    var majorAxis     = 40.;
    var spiralCount   = 4.;
    var Constant      = 200;
    var angle         = 0.;
    var factor        = 0.5;
    var maxAngle      = 720.;
    var angleDelta    = 3.;
    var rGap          = 8.;
    var rWidth        = 2*majorAxis;
    var rHeight       = 2*minorAxis;
    var shortPause    = 10.;
    var strokeWidth   = 1.;
    var style         = "";
    var fromX         = 0.;
    var fromY         = 0.;
    var destX         = 0.;
    var destY         = 0.;
    var lineX         = 0.;
    var lineY         = 0.;
    var branches      = 3.;
    var lineHVLength  = 2*minorAxis;
    var lineHHLength  = 2*majorAxis;
    var dashArray     = "4 4 4 4";
    var outerRadius   = 40;
    var innerRadius   = outerRadius/2.;
    var starAngle     = 36.;
    var vertexCount   = 10.;
    var starXPts      = Array(vertexCount);
    var starYPts      = Array(vertexCount);
    var points        = "";
 
    var rVal          = 0.;
    var gVal          = 0.;
    var bVal          = 0.;
 
    var polygonNode   = null;
    var lineNode      = null;
    var rectNode      = null;
    var ellipseNode   = null;
    var theTimeout    = null;
    var svgDocument      = null;
    var target        = null;
    var gcNode        = null;

    var svgNS         = "http://www.w3.org/2000/svg";

    function init(event)
    {
       svgDocument = event.target.ownerDocument;
       gcNode = svgDocument.getElementById("gc");

       initializePoints();
       drawSpiral(event);
    }

    function initializePoints()
    {
       for(var v=0; v<vertexCount; v++)
       {
          if(v % 2 == 0) { theRadius = outerRadius; }
          else           { theRadius = innerRadius; }

          offsetX = theRadius*Math.cos(
                               v*starAngle*Math.PI/180);

          offsetY = theRadius*Math.sin(
                               v*starAngle*Math.PI/180);

          starXPts[v] = basePointX+offsetX; 
          starYPts[v] = basePointY-offsetY; 
       }
    }

    function drawSpiral(event) 
    {
       for(angle=0; angle<maxAngle; angle+=angleDelta)
       {
          radius = Constant*Math.cos(
                             factor*angle*Math.PI/180);
  
          offsetX = angle+radius*Math.cos(angle*Math.PI/180);
          offsetY = radius*Math.sin(angle*Math.PI/180);

          currentX = basePointX+offsetX;
          currentY = basePointY-offsetY;
  
          rVal = angle*255/maxAngle;
          gVal = 0.;
          bVal = 0.;
 
          strokeColor = 
                  "rgb("+rVal+","+gVal+","+bVal+")";

        //style  = "fill:"+strokeColor;
        //style += ";stroke:yellow";
        //style += ";stroke-width:"+strokeWidth;
        //style += ";fill:url(#redCircle)";

          points = "";
          for(var v=0; v<vertexCount; v++)
          {
             points += (starXPts[v]+offsetX)+","+
                       (starYPts[v]+offsetY)+" "; 
          }

          polygonNode = svgDocument.createElementNS(svgNS, "polygon");

        //polygonNode.setAttribute("style",style);
          polygonNode.setAttribute("fill", "url(#redCircle)");
          polygonNode.setAttribute("stroke", "yellow");
          polygonNode.setAttribute("stroke-width", strokeWidth);

          polygonNode.setAttribute("points", points);
          gcNode.appendChild(polygonNode);

/*
          ellipseNode = 
                   svgDocument.createElementNS(svgNS, "ellipse");
 
        //ellipseNode.setAttribute("style",style);
          ellipseNode.setAttribute("cx", currentX);
          ellipseNode.setAttribute("cy", currentY);
          ellipseNode.setAttribute("rx", majorAxis);
          ellipseNode.setAttribute("ry", minorAxis);
   
          gcNode.appendChild(ellipseNode);
*/

          // add perpendicular line segments...
        //style  = ";stroke:black";
        //style += ";stroke-width:"+strokeWidth;
        //style += ";stroke-dasharray:"+dashArray;
   
          lineX = lineHHLength*Math.cos(
                          branches*angle*Math.PI/180);
          lineY = lineHHLength*Math.sin(
                          branches*angle*Math.PI/180);
   
          fromX = currentX-lineX;
          fromY = currentY+lineY;
          destX = currentX+lineX;
          destY = currentY-lineY;

          lineNode = svgDocument.createElementNS(svgNS, "line");
   
        //lineNode.setAttribute("style",style);
          lineNode.setAttribute("fill", strokeColor);
          lineNode.setAttribute("stroke", "black");
          lineNode.setAttribute("stroke-width", strokeWidth);
          lineNode.setAttribute("stroke-dasharray", dashArray);

          lineNode.setAttribute("x1",   fromX);
          lineNode.setAttribute("y1",   fromY);
          lineNode.setAttribute("x2",   destX);
          lineNode.setAttribute("y2",   destY);
   
          gcNode.appendChild(lineNode);
   
          lineX = lineHHLength*Math.cos(
                          branches*(angle+90)*Math.PI/180);
          lineY = lineHHLength*Math.sin(
                          branches*(angle+90)*Math.PI/180);
  
          fromX = currentX-lineX;
          fromY = currentY+lineY;
          destX = currentX+lineX;
          destY = currentY-lineY;

          lineNode = svgDocument.createElementNS(svgNS, "line");
    
        //lineNode.setAttribute("style",style);
          lineNode.setAttribute("fill", strokeColor);
          lineNode.setAttribute("stroke", "black");
          lineNode.setAttribute("stroke-width", strokeWidth);
          lineNode.setAttribute("stroke-dasharray", dashArray);

          lineNode.setAttribute("x1",   fromX);
          lineNode.setAttribute("y1",   fromY);
          lineNode.setAttribute("x2",   destX);
          lineNode.setAttribute("y2",   destY);
   
          gcNode.appendChild(lineNode);

          if( angle % rGap == 0 )
          {
             addRectangleNode();
          }
       }

    } // drawSpiral

    function addRectangleNode(event) 
    {
       rectNode = svgDocument.createElementNS(svgNS, "rect");
   
     //style  = "fill:yellow;stroke:red;";
     //style += "stroke-width:"+strokeWidth;

     //rectNode.setAttribute("style",style);
       rectNode.setAttribute("fill", "yellow");
       rectNode.setAttribute("stroke", "red");
       rectNode.setAttribute("stroke-width", strokeWidth);

       rectNode.setAttribute("x",      
                             currentX-rWidth/2);

       rectNode.setAttribute("y",      
                             currentY-rHeight/2);

       rectNode.setAttribute("width",  rWidth);
       rectNode.setAttribute("height", rHeight);

       gcNode.appendChild(rectNode);
    }

  ]]> </script>

<!-- ============================ -->
<defs>
  <radialGradient id="redCircle" 
                  gradientUnits="objectBoundingBox"
                  fx="30%" fy="30%">
   
    <stop offset="0%"   style="stop-color:#FFFFFF"/>
    <stop offset="40%"  style="stop-color:#AA0000"/>
    <stop offset="100%" style="stop-color:#660000"/>
  </radialGradient>
</defs>

<g id="gc" transform="translate(10,10)"> 
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>

</svg>
