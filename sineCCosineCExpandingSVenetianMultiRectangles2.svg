<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
    var basePointX    = 450.;
    var basePointY    = 350.;
    var currentX      = 0.;
    var currentY      = 0.;
    var offsetX       = 0.;
    var offsetY       = 0.;
    var radius        = 0.;
    var minorAxis     = 15.;
    var majorAxis     = 30.;
    var spiralCount   = 4.;
    var Constant      = 300.;
    var angle         = 0.;
    var maxAngle      = 720.;
    var angleDelta    = 1.;
    var rGap          = 20.;
    var rWidth        = 2*majorAxis;
    var rHeight       = 2*minorAxis;
    var widthDelta    = 4.;
    var heightDelta   = 2.;
    var shortPause    = 10.;
    var strokeWidth   = 1.;
    var strokeColor   = "";
    var style         = "";
    var points        = "";
    var slantLength   = 40;
    var slantAngle    = 30;
    var slantX        = 0.;
    var slantY        = 0.;
    var rVal          = 0.;
    var gVal          = 0.;
    var bVal          = 0.;
    var sineCubed     = 0.;
    var cosineCubed   = 0.;

    var rectNode      = null;
    var ellipseNode   = null;
    var theTimeout    = null;
    var svgDocument   = null;
    var target        = null;
    var gcNode        = null;

    var svgNS         = "http://www.w3.org/2000/svg";

    function init(event)
    {
       svgDocument = event.target.ownerDocument;
       gcNode = svgDocument.getElementById("gc");

       drawSpiral(event);
    }

    function drawSpiral(event) 
    {
       for(angle=0; angle<maxAngle; angle+=angleDelta)
       {
          sineCubed = Math.sin(angle*Math.PI/180)*
                      Math.sin(angle*Math.PI/180)*
                      Math.sin(angle*Math.PI/180);

          cosineCubed = Math.cos(angle*Math.PI/180)*
                        Math.cos(angle*Math.PI/180)*
                        Math.cos(angle*Math.PI/180);

          radius = Constant*(sineCubed-cosineCubed);
  
          offsetX = radius*Math.cos(angle*Math.PI/180);
          offsetY = radius*Math.sin(angle*Math.PI/180);

          currentX = basePointX+offsetX;
          currentY = basePointY-offsetY;
  
          rVal = angle*255/maxAngle;
          gVal = 0.;
          bVal = 0.;

          strokeColor = 
                  "rgb("+rVal+","+gVal+","+bVal+")";

        //style  = "fill:"+strokeColor;
        //style += ";stroke:yellow";
        //style += ";stroke-width:"+strokeWidth;

          ellipseNode = 
                   svgDocument.createElementNS(svgNS, "ellipse");
   
        //ellipseNode.setAttribute("style",style);
          ellipseNode.setAttribute("fill", strokeColor);
          ellipseNode.setAttribute("stroke", "yellow");
          ellipseNode.setAttribute("stroke-width", strokeWidth);

          ellipseNode.setAttribute("cx", currentX);
          ellipseNode.setAttribute("cy", currentY);
          ellipseNode.setAttribute("rx", majorAxis);
          ellipseNode.setAttribute("ry", minorAxis);
   
        //gcNode.appendChild(ellipseNode);

          if( angle % rGap == 0 )
          {
             addRectangleNode();
             rWidth  += widthDelta;
             rHeight += heightDelta;
          }

          // top edge...
          points  = "M"+currentX+","+currentY+" ";
          points += "L"+(currentX+slantX)+","+
                        (currentY+slantY)+" ";

          // right branch...
          points += "A"+(currentX+slantX)+","+(currentY+slantY)+" ";
          points += "0 0,0 "+(currentX+slantX)+","+
                             (currentY+100+slantY)+" ";

          // bottom edge...
          points += "L"+(currentX)+","+
                        (currentY+100)+" ";

          // left branch...
          points += "A"+(currentX-slantX)+","+
                        (currentY+100-slantY)+" ";
          points += "0 0,1 "+(currentX)+","+(currentY)+" z";

          arcPathNode = document.createElementNS(svgNS, "path");
           
        //arcPathNode.setAttribute("style",style);
          arcPathNode.setAttribute("fill", strokeColor);
          arcPathNode.setAttribute("stroke", "yellow");
          arcPathNode.setAttribute("stroke-width", strokeWidth);

          arcPathNode.setAttribute("d", points);

          gcNode.appendChild(arcPathNode);
       }

    } // drawSpiral

    function addRectangleNode() 
    {
       rectNode = svgDocument.createElementNS(svgNS, "rect");
   
     //style  = "fill:yellow;stroke:red;";
     //style  = "fill:url(#multiPattern1);";
     //style += "stroke-width:"+strokeWidth;

     //rectNode.setAttribute("style",style);
     //rectNode.setAttribute("fill", "url(#multiPattern1)");

       rectNode.setAttribute("fill", "url(#redGradientDefinition)");
       rectNode.setAttribute("stroke", "red");
       rectNode.setAttribute("stroke-width", strokeWidth);

       rectNode.setAttribute("x",      
                             currentX-rWidth/2);

       rectNode.setAttribute("y",      
                             currentY-rHeight/2);

       rectNode.setAttribute("width",  rWidth);
       rectNode.setAttribute("height", rHeight);

       gcNode.appendChild(rectNode);
    }

  ]]> </script>

<!-- ============================ -->
<defs>
  <linearGradient id="redGradientDefinition"
     x1="0" y1="0" x2="40" y2="40" 
     gradientUnits="userSpaceOnUse" spreadMethod="repeat">
     <stop offset="0%" style="stop-color:#FF0000"/>
     <stop offset="100%" style="stop-color:#000000"/>
  </linearGradient> 

  <linearGradient id="blueGradientDefinition"
     x1="0" y1="0" x2="40" y2="40" 
     gradientUnits="userSpaceOnUse" spreadMethod="repeat">
     <stop offset="20%" style="stop-color:#0000FF"/>
     <stop offset="80%" style="stop-color:#000000"/>
  </linearGradient> 
  
  <pattern id="multiPattern1" 
           width="160" height="160"
           patternUnits="userSpaceOnUse">
     <rect 
        x="0" y="0" width="80" height="80"
        style="fill:url(#redGradientDefinition);stroke:none"/>
   
     <rect 
        x="80" y="0" width="80" height="80"
        style="fill:url(#blueGradientDefinition);stroke:none"/>
   
     <rect 
        x="0" y="80" width="80" height="80"
        style="fill:url(#blueGradientDefinition);stroke:none"/>
   
     <rect 
        x="80" y="80" width="80" height="80"
        style="fill:url(#redGradientDefinition);stroke:none"/>
   </pattern>
</defs>

<g id="gc" transform="translate(10,10)"> 
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>

</svg>
